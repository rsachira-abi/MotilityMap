%--------------------------------------------------------------------------
% AnalyzeVideoSegment
%
% Analyze a video segment given the displacement fields generated by
% GenDisplacementFields*.m
%--------------------------------------------------------------------------

clear;
clc;

project_path = uigetdir('', 'Select project directory');
load(fullfile(project_path, 'displacement_fields.mat'));

NumElements = input('Enter number of elements to use: ');

%% Specify boundary

figure, imshow(FirstFrame);

right_boundary = images.roi.Polyline(gca);
bottom_boundary = images.roi.Polyline(gca);
left_boundary = images.roi.Polyline(gca);

disp('Draw boundaries. Backspace delete the last point. Right click indicate done.');

disp('Draw top boundary. Right click when done.');
top_boundary = drawpolyline;

disp('Draw right boundary. Right click when done.');
right_boundary.beginDrawingFromPoint(top_boundary.Position(end,:));
disp('Draw bottom boundary. Right click when done.');
bottom_boundary.beginDrawingFromPoint(right_boundary.Position(end,:));
disp('Draw left boundary. Right click when done.');
left_boundary.beginDrawingFromPoint(bottom_boundary.Position(end,:));

ffd = FreeFormDefStrainCalculator(NumElements, 1, DisplacementFields, max_weight);
ffd = ffd.FitInitialMesh({top_boundary.Position, right_boundary.Position, bottom_boundary.Position, left_boundary.Position});

%% Fit to video

[Px, Py] = ffd.OptimizeMeshDeformation(NumFrames, [], [], false, 1);

% Clear unwanted variables
clear FirstFrame DisplacementFields max_weight 

save(fullfile(project_path, 'strain_cache.mat'), '-v7.3');

%% Generate deformation video

% Can load if time vector is available for the video

disp('1: Longitudinal strain');
disp('2: Transverse strain');
strain_indx = input('What strain do you want to plot? ');

vout = VideoWriter(fullfile(project_path, ['strain_', num2str(strain_indx), '_vid.avi']));
vout.FrameRate = 15;
open(vout);

ValRangeX = 1:0.2:(ffd.m - 1);
ValRangeY = 2:0.2:(ffd.m - 2);
[MatMeshX, MatMeshY] = meshgrid(ValRangeX, ValRangeY);
MaterialPoints = [MatMeshX(:), MatMeshY(:)];

[~, ~, NN] = ffd.CalculatePoint(MaterialPoints(:,1), MaterialPoints(:,2), Px(:,1), Py(:,1));

cl = [-0.4, 0.4];
center = -1 * cl(2) / (cl(1) - cl(2));
mycolormap = customcolormap([0, center, 1], [1, 0, 0; 1, 1, 1; 0, 0, 1]);

if IS_RAW == true
    generateVideoFromRAW(vPath, FrameNameList, NumFrames, rect,...
        @(frame, frame_num) outputFrame(vout, strain_indx, ffd, Px, Py, MaterialPoints, NN, NaN, mycolormap, cl, frame, frame_num)...
        );
else
    generateVideoFromAVI(vPath, vFile, StartFrameNum, EndFrameNum, rect,...
        @(frame, frame_num) outputFrame(vout, strain_indx, ffd, Px, Py, MaterialPoints, NN, NaN, mycolormap, cl, frame, frame_num)...
        );
end

vout.close();

function outputFrame (vout, strain_indx, ffd, Px, Py, MaterialPoints, NN, timevec, mycolormap, cl, frame, frame_num)
% Generate the output frame for a given video frame
    disp(['Processing frame ', num2str(frame_num)]);

    time = -1;
    if ~isnan(timevec)
        time = timevec(frame_num);
    end

    Px2 = Px(:, frame_num);
    Py2 = Py(:, frame_num);

    [X, Y] = ffd.ExtractBoundary(Px2, Py2);

    [~, lambda] = ffd.CalculateStrain(Px2, Py2, MaterialPoints);
    [X_, Y_, ~] = ffd.CalculatePoint(MaterialPoints(:,1), MaterialPoints(:,2), Px2, Py2, NN);

    frame = insertText(frame, [10, 10], ['Frame: ', num2str(frame_num), ' | Time: ', num2str(time)], 'AnchorPoint', 'LeftTop', 'FontSize', 35);
    frame = insertMarker(frame, [X, Y], '*', 'Color', 'yellow');

    % Scatter plot without plotting.
    col_indx = round((lambda(:,strain_indx) + cl(2)) / (2 * cl(2)) .* size(mycolormap,1));
    col_indx(col_indx <= 0) = 1;
    col_indx(col_indx > size(mycolormap,1)) = size(mycolormap,1);
    col_indx = int32(col_indx);
    cols = mycolormap(col_indx, :);
    frame = insertShape(frame, 'circle', [X_, Y_, ones(length(X_),1).*10], 'Color', cols);

    vout.writeVideo(frame);
end

%% Helper functions

function generateVideoFromRAW (vPath, FrameNameList, NumFrames, rect, frameCallback)
% Read RAW frames and call the frameCallback with each frame.
% The callback function has the following syntax: 
% frameCallback (frame, frame_number)
    
    for i = 1:NumFrames
        I = ImageRegistration.ImportRaw(fullfile(vPath, [num2str(FrameNameList(i)), '.raw']));
        I(I > 1) = 1;
        I = imcrop(I, rect);

        frameCallback(I, i);
    end
    
end

function generateVideoFromAVI (vPath, vFile, StartFrameNum, EndFrameNum, rect, frameCallback)
% Read frames from VideoReader and call the frameCallback with each frame.
% The callback function has the following syntax: 
% frameCallback (frame, frame_number)

    vin = VideoReader(fullfile(vPath, vFile));

    for i = StartFrameNum:EndFrameNum
        I = vin.read(i);
        I = im2double(imcrop(I, rect));

        frameCallback(I, i);
    end

end




